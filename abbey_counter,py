def beat_abbey(prev_play, opponent_history=None, my_history=None, counters=None):
    if opponent_history is None:
        opponent_history = []
    if my_history is None:
        my_history = []
    if counters is None:
        counters = {
            "R": 0,
            "P": 0,
            "S": 0,
            "counter": 0
        }
    
    # First move
    if not prev_play:
        my_move = 'R'
        my_history.append(my_move)
        return my_move
    
    # Record opponent's move
    opponent_history.append(prev_play)
    counters[prev_play] += 1
    counters["counter"] += 1
    
    # Analyze abbey's behavior
    # Since abbey predicts based on our last move and plays to counter what it thinks we'll play next,
    # we can take advantage of this pattern recognition
    
    if len(my_history) >= 2:
        last_my_move = my_history[-1]
        
        # Predict what abbey will play
        # Abbey looks at our last move, guesses our next move, and plays to counter it
        # If we know what abbey is likely to play, we can counter it
        
        # If abbey has seen our pattern enough, it will try to predict and counter
        if counters["counter"] > 10:
            # Choose the move that beats what abbey would likely play
            if last_my_move == 'R':
                # Abbey would predict 'R' or 'P' and play 'P' or 'S', so we play 'S' or 'R'
                my_move = 'R' if counters["S"] > counters["P"] else 'S'
            elif last_my_move == 'P':
                # Abbey would predict 'P' or 'S' and play 'S' or 'R', so we play 'R' or 'P'
                my_move = 'P' if counters["R"] > counters["S"] else 'R'
            else:  # last_my_move == 'S'
                # Abbey would predict 'S' or 'R' and play 'R' or 'P', so we play 'P' or 'S'
                my_move = 'S' if counters["P"] > counters["R"] else 'P'
        else:
            # In the early game, use a mix of moves to gauge abbey's tendencies
            moves = ['R', 'P', 'S']
            my_move = moves[(moves.index(last_my_move) + 1) % 3]
    else:
        # For the second move
        my_move = 'P'
    
    my_history.append(my_move)
    return my_move